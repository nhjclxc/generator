package controller

import (
    "context"
    "github.com/gin-gonic/gin"
    "net/http"
)

// ${ClassName}Controller ${functionName} 控制器层
type ${ClassName}Controller struct{
    ${className}Service *service.${ClassName}Service
}

// New${ClassName}Controller 创建 ${ClassName} ${functionName} 控制器层对象
func New${ClassName}Controller(${className}Service *service.${ClassName}Service) *${ClassName}Controller {
    return &${ClassName}Controller{
        ${className}Service: ${className}Service,
    }
}

// New${ClassName}Controller2 创建 ${ClassName} ${functionName} 控制器层对象
func New${ClassName}Controller2(db *gorm.DB) *${ClassName}Controller {
    return &${ClassName}Controller{
        ${className}Service: service.New${ClassName}Service2(db),
    }
}

// Insert${ClassName} 新增${functionName}
// @Router /${businessName} [post]
func (${goReceiverName}c *${ClassName}Controller) Insert${ClassName}(c *gin.Context) {
    var ${className} model.${ClassName}
    err :=c.ShouldBindJSON(&${className})
    if err != nil {
        ErrorResponse(c, http.StatusInternalServerError, err.Error())
        return
    }

    res, err := ${goReceiverName}c.${className}Service.Insert${ClassName}(c.Request.Context(), ${className})

    if err != nil {
        ErrorResponse(c, http.StatusInternalServerError, "新增${functionName}失败：" + err.Error())
        return
    }
    SuccessResponse(c, res)
}

// Update${ClassName} 修改${functionName}
// @Router /${businessName} [put]
func (${goReceiverName}c *${ClassName}Controller) Update${ClassName}(c *gin.Context) {
    var ${className} model.${ClassName}
    err :=c.ShouldBindJSON(&${className})
    if err != nil {
        ErrorResponse(c, http.StatusInternalServerError, err.Error())
        return
    }

    res, err := ${goReceiverName}c.${className}Service.Update${ClassName}(c.Request.Context(), ${className})

    if err != nil {
        ErrorResponse(c, http.StatusInternalServerError, "修改${functionName}失败：" + err.Error())
        return
    }
    SuccessResponse(c, res)
}

// Delete${ClassName} 删除${functionName}
// @Router /${businessName}/:${pkColumn.javaField}List [delete]
func (${goReceiverName}c *${ClassName}Controller) Delete${ClassName}(c *gin.Context) {
    ${pkColumn.javaField}ListStr := c.Param("${pkColumn.javaField}List") // 例如: "1,2,3"
    ${pkColumn.javaField}List, err := commonUtils.ParseIds(${pkColumn.javaField}ListStr)
    if err != nil {
        c.JSON(http.StatusBadRequest, commonUtils.JsonResultError("参数错误：" + err.Error()))
        ErrorResponse(c, http.StatusInternalServerError, "参数错误：" + err.Error())
        return
    }

    res, err := ${goReceiverName}c.${className}Service.Delete${ClassName}(c.Request.Context(), ${pkColumn.javaField}List)

    if err != nil {
        ErrorResponse(c, http.StatusInternalServerError, "删除${functionName}失败：" + err.Error())
        return
    }
    SuccessResponse(c, res)
}

// Get${ClassName}By${pkColumn.capJavaField} 获取${functionName}详细信息
// @Router /${businessName}/:${pkColumn.javaField} [get]
func (${goReceiverName}c *${ClassName}Controller) Get${ClassName}By${pkColumn.capJavaField}(c *gin.Context) {
    ${pkColumn.javaField}Str := c.Param("${pkColumn.javaField}") // 例如: "1"
    ${pkColumn.javaField}, err := commonUtils.ParseId(${pkColumn.javaField}Str)
    if err != nil {
        ErrorResponse(c, http.StatusInternalServerError, "参数错误：" + err.Error())
        return
    }

    res, err := ${goReceiverName}c.${className}Service.Get${ClassName}By${pkColumn.capJavaField}(c.Request.Context(), ${pkColumn.javaField})

    if err != nil {
        ErrorResponse(c, http.StatusInternalServerError, "查询${functionName}失败：" + err.Error())
        return
    }
    SuccessResponse(c, res)
}

// Get${ClassName}List 查询${functionName}列表
// @Router /${businessName}/list [get]
func (${goReceiverName}c *${ClassName}Controller) Get${ClassName}List(c *gin.Context) {
    var ${className}Req req.${ClassName}Req
    err :=c.ShouldBindQuery(&${className}Req)
    if err != nil {
        ErrorResponse(c, http.StatusInternalServerError, err.Error())
        return
    }

    res, err := ${goReceiverName}c.${className}Service.Get${ClassName}List(c.Request.Context(), ${className}Req)

    if err != nil {
        ErrorResponse(c, http.StatusInternalServerError, "查询${functionName}列表失败：" + err.Error())
        return
    }
    SuccessResponse(c, res)
}

// Get${ClassName}PageList 分页查询${functionName}列表
// @Router /${businessName}/pageList [get]
func (${goReceiverName}c *${ClassName}Controller) Get${ClassName}PageList(c *gin.Context) {
    var ${className}Req req.${ClassName}Req
    err :=c.ShouldBindQuery(&${className}Req)
    if err != nil {
        ErrorResponse(c, http.StatusInternalServerError, err.Error())
        return
    }

    res, err := ${goReceiverName}c.${className}Service.Get${ClassName}PageList(c.Request.Context(), ${className}Req)

    if err != nil {
        ErrorResponse(c, http.StatusInternalServerError, "查询${functionName}分页列表失败：" + err.Error())
        return
    }
    SuccessResponse(c, res)
}

// Export${ClassName} 导出${functionName}列表
// @Router /${businessName}/export [get]
func (${goReceiverName}c *${ClassName}Controller) Export${ClassName}(c *gin.Context) {
    var ${className}Req req.${ClassName}Req
    err := c.ShouldBindQuery(&${className}Req)
    if err != nil {
        ErrorResponse(c, http.StatusInternalServerError, err.Error())
        return
    }

    res, err := ${goReceiverName}c.${className}Service.Export${ClassName}(c.Request.Context(), ${className}Req)

    if err != nil {
        ErrorResponse(c, http.StatusInternalServerError, "导出${functionName}列表失败：" + err.Error())
        return
    }
    SuccessResponse(c, res)
}
