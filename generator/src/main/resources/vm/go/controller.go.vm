package controller

import (
    "github.com/gin-gonic/gin"
    "net/http"
)

// ${ClassName}Controller ${functionName} 控制器层
type ${ClassName}Controller struct{
    ${className}Service *service.${ClassName}Service
}

// New${ClassName}Controller 创建 ${ClassName} ${functionName} 控制器层对象
func New${ClassName}Controller(${className}Service *service.${ClassName}Service) *${ClassName}Controller {
    return &${ClassName}Controller{
        ${className}Service: ${className}Service,
    }
}

// Insert${ClassName} 新增${functionName}
// @Tags ${functionName}模块
// @Summary 新增${functionName}-Summary
// @Description 新增${functionName}-Description
// @Security BearerAuth
// @Accept json
// @Produce json
// @Param ${className} body model.${ClassName} true "修改${functionName}实体类"
// @Success 200 {object} commonUtils.JsonResult "新增${functionName}响应数据"
// @Failure 401 {object} commonUtils.JsonResult "未授权"
// @Failure 500 {object} commonUtils.JsonResult "服务器异常"
// @Router /${businessName} [post]
func (${goReceiverName}c *${ClassName}Controller) Insert${ClassName}(c *gin.Context) {
    var ${className} model.${ClassName}
    c.ShouldBindJSON(&${className})

    res, err := ${goReceiverName}c.${className}Service.Insert${ClassName}(${className})

    if err != nil {
        c.JSON(http.StatusInternalServerError, commonUtils.JsonResultError("新增${functionName}失败：" + err.Error()))
        return
    }
    c.JSON(http.StatusOK, commonUtils.JsonResultSuccess[any](res))
}

// Update${ClassName} 修改${functionName}
// @Tags ${functionName}模块
// @Summary 修改${functionName}-Summary
// @Description 修改${functionName}-Description
// @Security BearerAuth
// @Accept json
// @Produce json
// @Param ${className} body model.${ClassName} true "修改${functionName}实体类"
// @Success 200 {object} commonUtils.JsonResult "修改${functionName}响应数据"
// @Failure 401 {object} commonUtils.JsonResult "未授权"
// @Failure 500 {object} commonUtils.JsonResult "服务器异常"
// @Router /${businessName} [put]
func (${goReceiverName}c *${ClassName}Controller) Update${ClassName}(c *gin.Context) {
    var ${className} model.${ClassName}
    c.ShouldBindJSON(&${className})

    res, err := ${goReceiverName}c.${className}Service.Update${ClassName}(${className})

    if err != nil {
        c.JSON(http.StatusInternalServerError, commonUtils.JsonResultError("修改${functionName}失败：" + err.Error()))
        return
    }
    c.JSON(http.StatusOK, commonUtils.JsonResultSuccess[any](res))
}

// Delete${ClassName} 删除${functionName}
// @Tags ${functionName}模块
// @Summary 删除${functionName}-Summary
// @Description 删除${functionName}-Description
// @Security BearerAuth
// @Accept path
// @Produce path
// @Param ${pkColumn.javaField}List path string true "${functionName}主键List"
// @Success 200 {object} commonUtils.JsonResult "删除${functionName}响应数据"
// @Failure 401 {object} commonUtils.JsonResult "未授权"
// @Failure 500 {object} commonUtils.JsonResult "服务器异常"
// @Router /${businessName}/:${pkColumn.javaField}List [delete]
func (${goReceiverName}c *${ClassName}Controller) Delete${ClassName}(c *gin.Context) {
    ${pkColumn.javaField}ListStr := c.Param("${pkColumn.javaField}List") // 例如: "1,2,3"
    ${pkColumn.javaField}List, err := commonUtils.ParseIds(${pkColumn.javaField}ListStr)
    if err != nil {
        c.JSON(http.StatusBadRequest, commonUtils.JsonResultError("参数错误：" + err.Error()))
        return
    }

    res, err := ${goReceiverName}c.${className}Service.Delete${ClassName}(${pkColumn.javaField}List)

    if err != nil {
        c.JSON(http.StatusInternalServerError, commonUtils.JsonResultError("删除${functionName}失败：" + err.Error()))
        return
    }
    c.JSON(http.StatusOK, commonUtils.JsonResultSuccess[any](res))
}

// Get${ClassName}By${pkColumn.capJavaField} 获取${functionName}详细信息
// @Tags ${functionName}模块
// @Summary 获取${functionName}详细信息-Summary
// @Description 获取${functionName}详细信息-Description
// @Security BearerAuth
// @Accept path
// @Produce path
// @Param ${pkColumn.javaField} path int64 true "${functionName}主键List"
// @Success 200 {object} commonUtils.JsonResult "获取${functionName}详细信息"
// @Failure 401 {object} commonUtils.JsonResult "未授权"
// @Failure 500 {object} commonUtils.JsonResult "服务器异常"
// @Router /${businessName}/:${pkColumn.javaField} [get]
func (${goReceiverName}c *${ClassName}Controller) Get${ClassName}By${pkColumn.capJavaField}(c *gin.Context) {
    ${pkColumn.javaField}Str := c.Param("${pkColumn.javaField}") // 例如: "1"
    ${pkColumn.javaField}, err := commonUtils.ParseId(${pkColumn.javaField}Str)
    if err != nil {
        c.JSON(http.StatusBadRequest, commonUtils.JsonResultError("参数错误：" + err.Error()))
        return
    }

    res, err := ${goReceiverName}c.${className}Service.Get${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaField})

    if err != nil {
        c.JSON(http.StatusInternalServerError, commonUtils.JsonResultError("查询${functionName}失败：" + err.Error()))
        return
    }
    c.JSON(http.StatusOK, commonUtils.JsonResultSuccess[any](res))
}

// Get${ClassName}List 查询${functionName}列表
// @Tags ${functionName}模块
// @Summary 查询${functionName}列表-Summary
// @Description 查询${functionName}列表-Description
// @Security BearerAuth
// @Accept param
// @Produce param
// @Param ${className}Req body req.${ClassName}Req true "${functionName}实体Req"
// @Success 200 {object} commonUtils.JsonResult "查询${functionName}列表响应数据"
// @Failure 401 {object} commonUtils.JsonResult "未授权"
// @Failure 500 {object} commonUtils.JsonResult "服务器异常"
// @Router /${businessName}/list [get]
func (${goReceiverName}c *${ClassName}Controller) Get${ClassName}List(c *gin.Context) {
    var ${className}Req req.${ClassName}Req
    c.ShouldBindQuery(&${className}Req)

    res, err := ${goReceiverName}c.${className}Service.Get${ClassName}List(${className}Req)

    if err != nil {
        c.JSON(http.StatusInternalServerError, commonUtils.JsonResultError("查询${functionName}列表失败：" + err.Error()))
        return
    }
    c.JSON(http.StatusOK, commonUtils.JsonResultSuccess[any](res))
}

// Get${ClassName}PageList 分页查询${functionName}列表
// @Tags ${functionName}模块
// @Summary 分页查询${functionName}列表-Summary
// @Description 分页查询${functionName}列表-Description
// @Security BearerAuth
// @Accept param
// @Produce param
// @Param ${className}Req body req.${ClassName}Req true "${functionName}实体Req"
// @Success 200 {object} commonUtils.JsonResult "分页查询${functionName}列表响应数据"
// @Failure 401 {object} commonUtils.JsonResult "未授权"
// @Failure 500 {object} commonUtils.JsonResult "服务器异常"
// @Router /${businessName}/pageList [get]
func (${goReceiverName}c *${ClassName}Controller) Get${ClassName}PageList(c *gin.Context) {
    var ${className}Req req.${ClassName}Req
    c.ShouldBindQuery(&${className}Req)

    res, err := ${goReceiverName}c.${className}Service.Get${ClassName}PageList(${className}Req)

    if err != nil {
        c.JSON(http.StatusInternalServerError, commonUtils.JsonResultError("查询${functionName}列表失败：" + err.Error()))
        return
    }
    c.JSON(http.StatusOK, commonUtils.JsonResultSuccess[any](res))
}

// Export${ClassName} 导出${functionName}列表
// @Tags ${functionName}模块
// @Summary 导出${functionName}列表-Summary
// @Description 导出${functionName}列表-Description
// @Security BearerAuth
// @Accept param
// @Produce param
// @Param ${className}Req body req.${ClassName}Req true "${functionName}实体Req"
// @Success 200 {object} commonUtils.JsonResult "导出${functionName}列表响应数据"
// @Failure 401 {object} commonUtils.JsonResult "未授权"
// @Failure 500 {object} commonUtils.JsonResult "服务器异常"
// @Router /${businessName}/export [get]
func (${goReceiverName}c *${ClassName}Controller) Export${ClassName}(c *gin.Context) {
    var ${className}Req req.${ClassName}Req
    c.ShouldBindQuery(&${className}Req)

    res, err := ${goReceiverName}c.${className}Service.Export${ClassName}(${className}Req)

    if err != nil {
        c.JSON(http.StatusInternalServerError, commonUtils.JsonResultError("导出${functionName}列表失败：" + err.Error()))
        return
    }
    c.JSON(http.StatusOK, commonUtils.JsonResultSuccess[any](res))
}

