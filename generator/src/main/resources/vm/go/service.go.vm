package service


// ${ClassName}Service ${functionName} Service 层
type ${ClassName}Service struct {
    db                           *gorm.DB
    ${className}Repository *repository.${ClassName}Repository
}

// New${ClassName}Service 创建 ${ClassName} ${functionName} 业务层对象
func New${ClassName}Service(db *gorm.DB, ${className}Repository *repository.${ClassName}Repository) *${ClassName}Service {
    return &${ClassName}Service{
        db:                           db,
        ${className}Repository: ${className}Repository,
    }
}

// Insert${ClassName} 新增${functionName}
func (${goReceiverName}s *${ClassName}Service) Insert${ClassName}(${className} model.${ClassName}) (res any, err error) {

    return ${goReceiverName}s.${className}Repository.Insert${ClassName}(${className})
}

// Update${ClassName} 修改${functionName}
func (${goReceiverName}s *${ClassName}Service) Update${ClassName}(${className} model.${ClassName}) (res any, err error) {

    return ${goReceiverName}s.${className}Repository.Update${ClassName}By${pkColumn.capJavaField}(${className})
}

// Delete${ClassName} 删除${functionName}
func (${goReceiverName}s *${ClassName}Service) Delete${ClassName}(${pkColumn.javaField}List []int64) (res any, err error) {

    return ${goReceiverName}s.${className}Repository.BatchDelete${ClassName}(${pkColumn.javaField}List)
}

// Get${ClassName}By${pkColumn.capJavaField} 获取${functionName}业务详细信息
func (${goReceiverName}s *${ClassName}Service) Get${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaField} int64) (res any, err error) {

    ${className} := model.${ClassName}{}
    err = ${goReceiverName}s.${className}Repository.Find${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaField})
    if err != nil {
        return nil, err
    }

    return ${className}, nil
}

// Get${ClassName}List 查询${functionName}业务列表
func (${goReceiverName}s *${ClassName}Service) Get${ClassName}List(${className}Req req.${ClassName}Req) (res any, err error) {

    ${className}, err := ${className}Req.ReqToModel()
    ${className}List, err := ${goReceiverName}s.${className}Repository.Find${ClassName}List(*${className}, ${className}Req.SatrtTime, ${className}Req.EndTime)
    if err != nil {
        return nil, err
    }

    return ${className}List, nil
}

// Get${ClassName}PageList 分页查询${functionName}业务列表
func (${goReceiverName}s *${ClassName}Service) Get${ClassName}PageList(${className}Req req.${ClassName}Req) (res any, err error) {

    ${className}, err := ${className}Req.ReqToModel()
    ${className}List, total, err := ${goReceiverName}s.${className}Repository.Find${ClassName}PageList(*${className}, ${className}Req.SatrtTime, ${className}Req.EndTime, ${className}Req.PageNum, ${className}Req.PageSize)
    if err != nil {
        return nil, err
    }

    return commonUtils.BuildPageData[model.${ClassName}](${className}List, total, ${className}Req.PageNum, ${className}Req.PageSize), nil
}

// Export${ClassName} 导出${functionName}业务列表
func (${goReceiverName}s *${ClassName}Service) Export${ClassName}(${className}Req req.${ClassName}Req) (res any, err error) {

    ${className}, err := ${className}Req.ReqToModel()
    ${goReceiverName}s.${className}Repository.Find${ClassName}PageList(*${className}, ${className}Req.SatrtTime, ${className}Req.EndTime, 1, 10000)
    // 实现导出 ...

    return nil, nil
}
