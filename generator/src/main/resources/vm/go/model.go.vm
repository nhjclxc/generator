package model

import (
    "encoding/json"
    "errors"
    "fmt"
    "github.com/mitchellh/mapstructure"
    "gorm.io/gorm"
    "time"
)

// ${ClassName} ${functionName}结构体
// @author ${author}
// @date ${datetime}
type ${ClassName} struct {
#foreach ($column in $columns)

    $column.goField $column.goType `gorm:"$column.goGormTarget" json:"$column.javaField" form:"$column.javaField"`// $column.columnComment
#end

    // todo update The following predefined fields

    Version uint `gorm:"column:version;default:1" json:"version"` // 乐观锁（版本控制）

    Remark string `gorm:"column:remark;" description:"备注"` // 备注

    CreatedAt time.Time `gorm:"column:created_at;type:datetime" json:"createdAt"` // 创建时间

    CreatedBy uint64 `gorm:"column:created_by;type:bigint" json:"createdBy"` // 创建人id

    UpdatedAt time.Time `gorm:"column:updated_at;type:datetime" json:"updatedAt"` // 更新时间

    UpdatedBy uint64 `gorm:"column:updated_by;type:bigint" json:"updatedBy"` // 更新人id

    DeletedAt gorm.DeletedAt `gorm:"column:deleted_at;type:datetime" json:"deletedAt"` // 删除标记, 删除时间 GORM 默认启用了“软删除（Soft Delete）”只要存在这个字段，GORM 默认启用软删除。

    DeletedBy uint64 `gorm:"column:deleted_by;type:bigint" json:"deletedBy"` // 删除人id

    // time_format:"2006-01-02 15:04:05"
}

// TableName 返回当前实体类的表名
func (${goReceiverName} *${ClassName}) TableName() string {
    return "${tableName}"
}

// CreateTable 根据结构体里面的gorm信息创建表结构
func (${goReceiverName} *${ClassName}) CreateTable(tx *gorm.DB) error {
    tableName := ${goReceiverName}.TableName()
    if !tx.Migrator().HasTable(tableName) {
        err := tx.Set("gorm:table_options", "ENGINE=InnoDB CHARSET=utf8mb4 COMMENT='${functionName}'").
                Table(tableName).Migrator().CreateTable(&${ClassName}{})
        if err != nil {
            return err
        }
    }
    return nil
}

// 可用钩子函数包括：BeforeCreate / AfterCreate、BeforeUpdate / AfterUpdate、BeforeDelete / AfterDelete
// BeforeCreate 在插入数据之前执行的操作
func (${goReceiverName} *${ClassName}) BeforeCreate(tx *gorm.DB) (err error) {
    if err = ${goReceiverName}.CreateTable(tx); err != nil {
        return err
    }

    ${goReceiverName}.CreatedAt = time.Now()
    ${goReceiverName}.UpdatedAt = time.Now()
    return
}

func (${goReceiverName} *${ClassName}) BeforeUpdate(tx *gorm.DB) (err error) {
    ${goReceiverName}.UpdatedAt = time.Now()
    return
}

// MapTo${ClassName} map映射转化为当前结构体
func MapTo${ClassName}(inputMap map[string]any) (*${ClassName}) {
    //go get github.com/mitchellh/mapstructure

    var ${className} ${ClassName}
    decoder, err := mapstructure.NewDecoder(&mapstructure.DecoderConfig{
        DecodeHook: mapstructure.ComposeDecodeHookFunc(
            func(from reflect.Type, to reflect.Type, data interface{}) (interface{}, error) {
                if from.Kind() == reflect.String && to == reflect.TypeOf(time.Time{}) {
                    return time.Parse("2006-01-02 15:04:05", data.(string))
                }
                return data, nil
            },
        ),
        Result: &${className},
    })
    if err != nil {
        fmt.Printf("MapToStruct Decode NewDecoder error: %v", err)
        panic(err)
    }

    if err := decoder.Decode(inputMap); err != nil {
        fmt.Printf("MapToStruct Decode error: %v", err)
    }
    return &${className}
}

// ${ClassName}ToMap 当前结构体转化为map映射
func (${goReceiverName} *${ClassName}) ${ClassName}ToMap() (map[string]any) {
    // 先转成 map
    m := make(map[string]any)
    bytes, err := json.Marshal(${goReceiverName})
    if err != nil {
        fmt.Printf("StructToMap marshal error: %v", err)
        return nil
    }

    err = json.Unmarshal(bytes, &m)
    if err != nil {
        fmt.Printf("StructToMap unmarshal error: %v", err)
        return nil
    }

    // 格式化所有 time.Time
    for k, v := range m {
        if t, ok := v.(string); ok && len(t) > 10 && strings.Contains(t, "T") {
            // 尝试解析 RFC3339，再格式化
            if parsed, err := time.Parse(time.RFC3339, t); err == nil {
                m[k] = parsed.Format("2006-01-02 15:04:05")
            }
        }
    }

    return m
}


// 东八区
var cstZone = func() *time.Location {
    loc, err := time.LoadLocation("Asia/Shanghai")
    if err != nil {
        return time.FixedZone("CST", 8*3600)
    }
    return loc
}()

// 获取东八区时间
func getNow() time.Time {
    return time.Now().In(cstZone)
}
