package ${packageName}.controller;

import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.List;
import javax.servlet.http.HttpServletResponse;
import com.github.pagehelper.PageInfo;
import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import ${packageName}.model.${ClassName};
import ${packageName}.service.I${ClassName}Service;

#if(${enableSwagger})
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
#end

/**
 * ${functionName}Controller
 *
 * @author ${author}
 * @date ${datetime}
 */
@RestController
@NoArgsConstructor
@AllArgsConstructor
@RequestMapping("/${businessName}")
#if(${enableSwagger})
@Api(tags = "${ClassName}Controller", description = "${functionName}控制器")
#end
public class ${ClassName}Controller {

    private I${ClassName}Service ${className}Service;

    /**
     * 分页查询${functionName}列表
     */
    #if(${enableSwagger})
    @ApiOperation(value = "分页查询${functionName}列表")
    @ApiResponse(code = 200, message = "success")
    #end
    @GetMapping("/listPage")
    public JsonResult<PageInfo<${ClassName}>> listPage(${ClassName} ${className}, Integer pageNum, Integer pageSize) {
        PageInfo<${ClassName}> pageInfo = ${className}Service.select${ClassName}List(${className}, pageNum, pageSize);
        return JsonResult.success(pageInfo);
    }

    /**
     * 查询${functionName}列表
     */
    #if(${enableSwagger})
    @ApiOperation(value = "查询${functionName}列表")
    @ApiResponse(code = 200, message = "success")
    #end
    @GetMapping("/list")
    public JsonResult<List<${ClassName}>> list(${ClassName} ${className}) {
        return JsonResult.success(${className}Service.select${ClassName}List(${className}));
    }

    /**
     * 获取${functionName}详细信息
     */
    #if(${enableSwagger})
    @ApiOperation(value = "获取${functionName}详细信息")
    @ApiResponse(code = 200, message = "success")
    #end
    @GetMapping(value = "/{${pkColumn.javaField}}")
    public JsonResult<${ClassName}> getInfo(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}) {
        return JsonResult.success(${className}Service.select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaField}));
    }

    /**
     * 新增${functionName}
     */
    #if(${enableSwagger})
    @ApiOperation(value = "新增${functionName}")
    @ApiResponse(code = 200, message = "success")
    #end
    @PostMapping
    public JsonResult<Object> add(@RequestBody ${ClassName} ${className}) {
        return JsonResult.success(${className}Service.insert${ClassName}(${className}));
    }

    /**
     * 修改${functionName}
     */
    #if(${enableSwagger})
    @ApiOperation(value = "修改${functionName}")
    @ApiResponse(code = 200, message = "success")
    #end
    @PutMapping
    public JsonResult<Object> edit(@RequestBody ${ClassName} ${className}) {
        return JsonResult.success(${className}Service.update${ClassName}(${className}));
    }

    /**
     * 删除${functionName}
     */
    #if(${enableSwagger})
    @ApiOperation(value = "删除${functionName}")
    @ApiResponse(code = 200, message = "success")
    #end
	@DeleteMapping("/{${pkColumn.javaField}List}")
    public JsonResult<Object> remove(@PathVariable List<${pkColumn.javaType}> ${pkColumn.javaField}List) {
        return JsonResult.success(${className}Service.delete${ClassName}By${pkColumn.capJavaField}List(${pkColumn.javaField}List));
    }

    /**
     * 导出${functionName}列表
     */
    #if(${enableSwagger})
    @ApiOperation(value = "导出${functionName}列表")
    @ApiResponse(code = 200, message = "success")
    #end
    @GetMapping("/export")
    public void export(HttpServletResponse response, ${ClassName} ${className}) throws IOException {
        setResponse(response, "导出${functionName}列表_" + System.currentTimeMillis() + ".xlsx");
        List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});

    }

    private static void setResponse(HttpServletResponse response, String fileName) throws IOException {
        response.addHeader("Access-Control-Allow-Origin", "*");
        response.addHeader("Access-Control-Expose-Headers", "Content-Disposition");
        response.setHeader("Content-Disposition", "attachment; filename=" + URLEncoder.encode(fileName, StandardCharsets.UTF_8.name()));
        response.setContentType("application/octet-stream; charset=UTF-8");
    }
}
